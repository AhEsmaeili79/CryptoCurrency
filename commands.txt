
# Simple Command Documentation for Crypto Trading Project

## 1. Setup Project Environment

1. **Create a new directory and navigate into it:**
   ```
   mkdir crypto-backend
   cd crypto-backend
   ```

2. **Initialize Pipenv environment and install dependencies:**
   ```
   pipenv install fastapi uvicorn
   pipenv install sqlalchemy databases python-dotenv alembic
   ```

3. **Activate the Pipenv shell:**
   ```
   pipenv shell
   ```

---

## 2. FastAPI Development

1. **Run the FastAPI server (Backend API):**
   ```
   uvicorn app.main:app --reload
   ```

   The server will be running at: http://127.0.0.1:8000.

2. **Access the API Docs (Swagger UI) at:**
   ```
   http://127.0.0.1:8000/docs
   ```

---

## 3. Database Migrations with Alembic

1. **Initialize Alembic:**
   ```
   alembic init alembic
   ```

2. **Configure Alembic:**
   - Open `alembic.ini` and set the database URL:
     ```
     sqlalchemy.url = sqlite:///./crypto.db  # Use your database URL here
     ```

3. **Generate the initial migration:**
   ```
   alembic revision --autogenerate -m "Initial migration"
   ```

4. **Apply the migration to create tables:**
   ```
   alembic upgrade head
   ```

---

## 4. Running Tests (Optional)

1. **Install `pytest` for testing:**
   ```
   pipenv install --dev pytest
   ```

2. **Run tests:**
   ```
   pytest
   ```

---

## 5. React Frontend (Simple Setup)

1. **Create the React app (Frontend):**
   ```
   npx create-react-app my-frontend
   cd my-frontend
   ```

2. **Fetch data from the FastAPI Backend in your React components (Example in `buy-sell-digital-currency.tsx`):**
   ```tsx
   import React, { useState, useEffect } from 'react';

   const BuySellCurrency: React.FC = () => {
     const [data, setData] = useState(null);

     useEffect(() => {
       fetch("http://127.0.0.1:8000/buy-sell/transaction/")
         .then((response) => response.json())
         .then((data) => setData(data));
     }, []);

     return <div>{JSON.stringify(data)}</div>;
   };

   export default BuySellCurrency;
   ```

---

## 6. Docker Setup (Optional)

1. **Backend Dockerfile (For FastAPI app):**
   ```Dockerfile
   FROM python:3.11-slim

   WORKDIR /app

   COPY . /app

   RUN pip install pipenv
   RUN pipenv install --deploy --ignore-pipfile

   EXPOSE 8000

   CMD ["pipenv", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
   ```

2. **Frontend Dockerfile (For React app):**
   ```Dockerfile
   FROM node:18-slim

   WORKDIR /app

   COPY . /app

   RUN npm install

   EXPOSE 3000

   CMD ["npm", "start"]
   ```

3. **Create a `docker-compose.yml` file for both backend and frontend:**
   ```yaml
   version: '3'
   services:
     backend:
       build:
         context: ./crypto-backend
       ports:
         - "8000:8000"
       volumes:
         - ./crypto-backend:/app
     frontend:
       build:
         context: ./frontend
       ports:
         - "3000:3000"
       volumes:
         - ./frontend:/app
   ```

4. **Build and start both services using Docker Compose:**
   ```
   docker-compose up --build
   ```

---

## 7. Deployment (Optional)

For deploying the application to platforms such as Heroku, AWS, or DigitalOcean, follow the respective platform's documentation. For example:

1. **Heroku Deployment**:
   - Install Heroku CLI.
   - Push your project to Heroku.
   - Use a `Procfile` to define how to run the app.

2. **AWS or DigitalOcean**:
   - Set up an EC2 instance or droplet.
   - Deploy the FastAPI app with Uvicorn or Docker.

---

# End of Command Documentation
